A semaphore is a synchronization tool that limits access to a resource by multiple threads. 
It maintains a counter that determines how many threads can access a resource simultaneously. 
When the counter reaches zero, other threads trying to access the resource are blocked until the counter is incremented again.


Binary Semaphore: This semaphore can have only two values: 0 and 1. 
It's like a mutex and can be used to allow one thread access at a time.

Counting Semaphore: This semaphore can have any non-negative value, which represents the number of 
threads that can access the resource at the same time.

C++20 provides semaphore library for semaphore implementation. 


Difference between mutex and semaphore.

Mutex:
- A mutex (mutual exclusion) is a locking mechanism used to enforce exclusive access to a resource.
It allows only one thread to own the lock at a time, making it suitable for protecting a single shared resource.
- Only the thread that locks (owns) the mutex is allowed to unlock it.

Semaphore:
- A semaphore is a signaling mechanism that can control access to a shared resource by allowing a certain number
 of threads to access it concurrently.
- any thread can signal (increment) or wait (decrement) the semaphore, making it suitable for signaling between threads.
